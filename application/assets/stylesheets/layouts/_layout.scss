/* =============================================================================

   Layout
   ====

   ========================================================================== */

/* ==========================================================================
   ##Base Layouts
   ========================================================================== */

.l-wrapper {
    @include clearfix;
    position: relative;
}

.l-container {
    @include clearfix;
    margin-right: auto;
    margin-left: auto;

    @if $grid-enabled {
        padding-right: $grid-gutter-width / 2;
        padding-left: $grid-gutter-width / 2;
        @if $grid-fluid-breakpoints {
            //fluid layout till max width
            max-width: $container-lg;
        } @else {
            //no need for breakpoint fallbacks, since it's explicitly set below!
            @include mq(sm) {
                width: $container-sm;
            }

            @include mq(md) {
                width: $container-md;
            }

            @include mq(lg) {
                width: 100%;
                max-width: $container-lg;
            }
        }
    }
}

/* Responsive Grid System

   Adapted from [Twitter Bootstrap 3](https://github.com/twbs/bootstrap-sass/blob/master/vendor/assets/stylesheets/bootstrap/_grid.scss)
   ========================================================================== */

@if $grid-enabled {
    @-ms-viewport {
        width: device-width;
    }

    .l-row {
        @include clearfix;
        margin-right: $grid-gutter-width / -2;
        margin-left: $grid-gutter-width / -2;
    }
    @include make-grid-columns;
    // Extra small grid
    //
    // Columns, offsets, pushes, and pulls for extra small devices like
    // smartphones.
    @include make-grid-columns-float(xs);
    @include make-grid($grid-columns, xs, width);
    @include make-grid($grid-columns, xs, pull);
    @include make-grid($grid-columns, xs, push);
    @include make-grid($grid-columns, xs, offset);
    // Small grid
    //
    // Columns, offsets, pushes, and pulls for the small device range, from phones
    // to tablets.
    @include mq(sm) {
        @include make-grid-columns-float(sm);
        @include make-grid($grid-columns, sm, width);
        @include make-grid($grid-columns, sm, pull);
        @include make-grid($grid-columns, sm, push);
        @include make-grid($grid-columns, sm, offset);
    }

    // Medium grid
    //
    // Columns, offsets, pushes, and pulls for the desktop device range.
    @include mq(md) {
        @include make-grid-columns-float(md);
        @include make-grid($grid-columns, md, width);
        @include make-grid($grid-columns, md, pull);
        @include make-grid($grid-columns, md, push);
        @include make-grid($grid-columns, md, offset);
    }

    // Large grid
    //
    // Columns, offsets, pushes, and pulls for the large desktop device range.
    @include mq(lg) {
        @include make-grid-columns-float(lg);
        @include make-grid($grid-columns, lg, width);
        @include make-grid($grid-columns, lg, pull);
        @include make-grid($grid-columns, lg, push);
        @include make-grid($grid-columns, lg, offset);
    }
}

/* MQ Relative Visibility
   ========================================================================== */
@if $grid-enabled {
    @include mq(xs) {
        .l-hidden--from-xs {
            display: none !important;
        }
    }

    @include mq(sm) {
        .l-hidden--from-sm {
            display: none !important;
        }
    }

    @include mq(md) {
        .l-hidden--from-md {
            display: none !important;
        }
    }

    @include mq(lg) {
        .l-hidden--from-lg {
            display: none !important;
        }
    }

    @include mq($until: xs) {
        .l-hidden--until-xs {
            display: none !important;
        }
    }

    @include mq($until: sm) {
        .l-hidden--until-sm {
            display: none !important;
        }
    }

    @include mq($until: md) {
        .l-hidden--until-md {
            display: none !important;
        }
    }

    @include mq($until: lg) {
        .l-hidden--until-lg {
            display: none !important;
        }
    }
}

/* Shared Layout Styles
 * ========================================================================== */


body {
    width: 100vw;
    min-height: 100vh;
}

#main {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    width: 100vw;
    height: 100vh;

    > * {
        flex-basis: auto;
        flex-grow: 0;
        flex-shrink: 1;
    }
}

#logo {
    display: block;
    width: 100%;
    height: auto;
    max-width: 60vw;

    @include mq(sm) {
        max-width: 60vw;
    }

    @include mq(md) {
        max-width: 30vw;
    }
}


#social-list {
    margin: 2em 0 0;
    padding: 0;
    font-size: font-size(22px);
    list-style-type: none;
    font-weight: normal;

    @include mq(sm) {
        font-size: font-size(26px);
    }

    > * + * {
        margin-top: 1em;
    }

    .icon {
        position: relative;
        display: inline-block;
        margin-right: 0.2em;
        font-size: 1.4em;
        line-height: 1.4em;
        transition: all 150ms ease-out;
        vertical-align: middle;
    }

    .icon-facebook-official {
        top: -0.1em;
    }

    a {
        position: relative;
        display: inline-block;
        text-decoration: none;
        color: $color-dark;
        transition: all 150ms ease-out;
        line-height: 1.4em;

        &:hover .icon {
            transform: translateX(2px);
        }


        &:hover .icon-twitter {
            color: #1da1f2;
        }

        &:hover .icon-facebook-official {
            color: #3b5998;
        }
    }
}